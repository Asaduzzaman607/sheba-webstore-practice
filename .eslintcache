[{"/var/www/sheba-webstore/src/index.js":"1","/var/www/sheba-webstore/src/App.js":"2","/var/www/sheba-webstore/src/reportWebVitals.js":"3","/var/www/sheba-webstore/src/Components/Homepage/Shop/Shop.js":"4","/var/www/sheba-webstore/src/Components/Homepage/Products/Products.js":"5"},{"size":547,"mtime":1610444795249,"results":"6","hashOfConfig":"7"},{"size":195,"mtime":1610537545120,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1610424493466,"results":"9","hashOfConfig":"7"},{"size":5116,"mtime":1611490948636,"results":"10","hashOfConfig":"7"},{"size":2974,"mtime":1611475021197,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"bnpn3n",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"/var/www/sheba-webstore/src/index.js",[],["24","25"],"/var/www/sheba-webstore/src/App.js",[],"/var/www/sheba-webstore/src/reportWebVitals.js",[],"/var/www/sheba-webstore/src/Components/Homepage/Shop/Shop.js",["26","27"],"/var/www/sheba-webstore/src/Components/Homepage/Products/Products.js",["28"],"import React from 'react';\nimport './Products.css';\n\n\nconst Products = (props) => {\n\n    const {name, image_gallery, original_price,vat_percentage,discount_percentage, discounted_amount} = props.data\n    const imgUrl = image_gallery[0]?.image_link || \"https://s3.ap-south-1.amazonaws.com/cdn-shebadev/images/pos/services/thumbs/default.jpg\";\n    \n    \n\n    // formatting with comma\n\n    function numberWithCommas(x) {\n        var parts = x.toString().split(\".\");\n        parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        return parts.join(\".\");\n    }\n\n   \n    // price calculation\n    \n    let vat = ((original_price * vat_percentage)/100).toFixed(1)\n    let total_original_price = parseFloat((original_price + vat || 0))\n    let total = parseFloat(total_original_price)\n    console.log(typeof total);\n\n\n    let discounted= parseFloat((discounted_amount || original_price)+ vat);\n   let discounted_price = (discounted.toFixed(1))\n\n    return (\n        <div className=\"col-md-4 col-sm-6\">\n            <div className=\"product-card p-0\">\n                <img className=\"product-img\" src={imgUrl} alt=\"Card image cap\"/>\n                {\n                    discount_percentage>0 && <span className=\"discount-percent\">{discount_percentage}% off</span>\n\n                }\n                <div className=\"product-body p-0\">\n                    <div className=\"product-title\">\n                        <h5 className=\"product-title \">{name}</h5>\n                    </div>\n        \n                    <div className=\"d-flex price-add-container justify-content-between\">\n                        <div className='price-disc-container'>\n                            {\n                                discount_percentage? \n                                <>\n                                 <h4 className=\"discount-container\">৳ {numberWithCommas(discounted_price)}</h4>\n                                <h5 className=\"original-price\">৳ {numberWithCommas(total)}</h5>\n                                </>\n                           \n                            :\n                           <>\n                                <h5 className=\"original-price-only\">৳ {numberWithCommas(total)}</h5>\n                                </>\n                           }\n                        </div>\n                        {\n                            true ?\n                            <div>\n                                <button className=\"addBtn\">+ Add</button>\n                            </div>\n                            :\n                            <div className=\"otherBtn\">\n                                <button className=\"otherBtn\">+</button>\n                                <input type=\"text\"/>\n                                <button className=\"otherBtn\">-</button>\n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>            \n        </div>\n    );\n};\n\nexport default Products;",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":45,"column":5,"nodeType":"35","endLine":45,"endColumn":15,"suggestions":"36"},{"ruleId":"37","severity":1,"message":"38","line":58,"column":17,"nodeType":"39","messageId":"40","endLine":58,"endColumn":19},{"ruleId":"41","severity":1,"message":"42","line":35,"column":17,"nodeType":"43","endLine":35,"endColumn":81},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data.products'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setShow' needs the current value of 'data.products'.","ArrayExpression",["46"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"47","fix":"48"},"Update the dependencies array to be: [data.products, selected]",{"range":"49","text":"50"},[1191,1201],"[data.products, selected]"]